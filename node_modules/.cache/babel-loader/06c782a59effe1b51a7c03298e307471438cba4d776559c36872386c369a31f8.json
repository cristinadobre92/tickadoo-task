{"ast":null,"code":"import{login,register,refreshToken,testApi}from\"../authApi.ts\";import{signInDialogTexts as t}from\"./signInDialog.texts.ts\";export async function handleSubmitHelper(_ref){let{e,mode,email,password,setError,setLoading,onAuthSuccess,setRegisterSuccess,setEmail,setPassword,setMode}=_ref;e.preventDefault();setError(\"\");if(!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){setError(t.validEmail);return;}if(password.length<8){setError(t.validPassword);return;}setLoading(true);try{let data;if(mode===\"signIn\"){data=await login(email,password);onAuthSuccess(data);}else{data=await register(email,password);setRegisterSuccess(true);setEmail(\"\");setPassword(\"\");setTimeout(()=>{setRegisterSuccess(false);setMode(\"signIn\");},1500);}}catch(err){setError(err.message);}finally{setLoading(false);}}export async function handleTestHelper(_ref2){let{accessToken,setTestResult,refreshTokenValue,setAccessToken,setRefreshTokenValue}=_ref2;setTestResult(\"\");try{const res=await testApi(accessToken);if(res.status===401){const data=await refreshToken(refreshTokenValue);setAccessToken(data.accessToken);setRefreshTokenValue(data.refreshToken);setTestResult(\"Token refreshed. Try again.\");}else if(res.ok){setTestResult(\"API call successful! Token is valid.\");}else{setTestResult(\"API call failed.\");}}catch(err){setTestResult(err.message);}}","map":{"version":3,"names":["login","register","refreshToken","testApi","signInDialogTexts","t","handleSubmitHelper","_ref","e","mode","email","password","setError","setLoading","onAuthSuccess","setRegisterSuccess","setEmail","setPassword","setMode","preventDefault","test","validEmail","length","validPassword","data","setTimeout","err","message","handleTestHelper","_ref2","accessToken","setTestResult","refreshTokenValue","setAccessToken","setRefreshTokenValue","res","status","ok"],"sources":["/Users/cristinadobre/Legacy/tickadoo-task/src/SignInDialog/signInDialog.handlers.ts"],"sourcesContent":["import { login, register, refreshToken, testApi } from \"../authApi.ts\";\nimport { signInDialogTexts as t } from \"./signInDialog.texts.ts\";\n\nexport async function handleSubmitHelper({\n    e,\n    mode,\n    email,\n    password,\n    setError,\n    setLoading,\n    onAuthSuccess,\n    setRegisterSuccess,\n    setEmail,\n    setPassword,\n    setMode,\n}) {\n    e.preventDefault();\n    setError(\"\");\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n        setError(t.validEmail);\n        return;\n    }\n    if (password.length < 8) {\n        setError(t.validPassword);\n        return;\n    }\n    setLoading(true);\n    try {\n        let data: { accessToken: string; refreshToken: string; };\n        if (mode === \"signIn\") {\n            data = await login(email, password);\n            onAuthSuccess(data);\n        } else {\n            data = await register(email, password);\n            setRegisterSuccess(true);\n            setEmail(\"\");\n            setPassword(\"\");\n            setTimeout(() => {\n                setRegisterSuccess(false);\n                setMode(\"signIn\");\n            }, 1500);\n        }\n    } catch (err) {\n        setError(err.message);\n    } finally {\n        setLoading(false);\n    }\n}\n\nexport async function handleTestHelper({\n    accessToken,\n    setTestResult,\n    refreshTokenValue,\n    setAccessToken,\n    setRefreshTokenValue,\n}) {\n    setTestResult(\"\");\n    try {\n        const res = await testApi(accessToken);\n        if (res.status === 401) {\n            const data = await refreshToken(refreshTokenValue);\n            setAccessToken(data.accessToken);\n            setRefreshTokenValue(data.refreshToken);\n            setTestResult(\"Token refreshed. Try again.\");\n        } else if (res.ok) {\n            setTestResult(\"API call successful! Token is valid.\");\n        } else {\n            setTestResult(\"API call failed.\");\n        }\n    } catch (err) {\n        setTestResult(err.message);\n    }\n}"],"mappings":"AAAA,OAASA,KAAK,CAAEC,QAAQ,CAAEC,YAAY,CAAEC,OAAO,KAAQ,eAAe,CACtE,OAASC,iBAAiB,GAAI,CAAAC,CAAC,KAAQ,yBAAyB,CAEhE,MAAO,eAAe,CAAAC,kBAAkBA,CAAAC,IAAA,CAYrC,IAZsC,CACrCC,CAAC,CACDC,IAAI,CACJC,KAAK,CACLC,QAAQ,CACRC,QAAQ,CACRC,UAAU,CACVC,aAAa,CACbC,kBAAkB,CAClBC,QAAQ,CACRC,WAAW,CACXC,OACJ,CAAC,CAAAX,IAAA,CACGC,CAAC,CAACW,cAAc,CAAC,CAAC,CAClBP,QAAQ,CAAC,EAAE,CAAC,CACZ,GAAI,CAAC,4BAA4B,CAACQ,IAAI,CAACV,KAAK,CAAC,CAAE,CAC3CE,QAAQ,CAACP,CAAC,CAACgB,UAAU,CAAC,CACtB,OACJ,CACA,GAAIV,QAAQ,CAACW,MAAM,CAAG,CAAC,CAAE,CACrBV,QAAQ,CAACP,CAAC,CAACkB,aAAa,CAAC,CACzB,OACJ,CACAV,UAAU,CAAC,IAAI,CAAC,CAChB,GAAI,CACA,GAAI,CAAAW,IAAoD,CACxD,GAAIf,IAAI,GAAK,QAAQ,CAAE,CACnBe,IAAI,CAAG,KAAM,CAAAxB,KAAK,CAACU,KAAK,CAAEC,QAAQ,CAAC,CACnCG,aAAa,CAACU,IAAI,CAAC,CACvB,CAAC,IAAM,CACHA,IAAI,CAAG,KAAM,CAAAvB,QAAQ,CAACS,KAAK,CAAEC,QAAQ,CAAC,CACtCI,kBAAkB,CAAC,IAAI,CAAC,CACxBC,QAAQ,CAAC,EAAE,CAAC,CACZC,WAAW,CAAC,EAAE,CAAC,CACfQ,UAAU,CAAC,IAAM,CACbV,kBAAkB,CAAC,KAAK,CAAC,CACzBG,OAAO,CAAC,QAAQ,CAAC,CACrB,CAAC,CAAE,IAAI,CAAC,CACZ,CACJ,CAAE,MAAOQ,GAAG,CAAE,CACVd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC,CACzB,CAAC,OAAS,CACNd,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAEA,MAAO,eAAe,CAAAe,gBAAgBA,CAAAC,KAAA,CAMnC,IANoC,CACnCC,WAAW,CACXC,aAAa,CACbC,iBAAiB,CACjBC,cAAc,CACdC,oBACJ,CAAC,CAAAL,KAAA,CACGE,aAAa,CAAC,EAAE,CAAC,CACjB,GAAI,CACA,KAAM,CAAAI,GAAG,CAAG,KAAM,CAAAhC,OAAO,CAAC2B,WAAW,CAAC,CACtC,GAAIK,GAAG,CAACC,MAAM,GAAK,GAAG,CAAE,CACpB,KAAM,CAAAZ,IAAI,CAAG,KAAM,CAAAtB,YAAY,CAAC8B,iBAAiB,CAAC,CAClDC,cAAc,CAACT,IAAI,CAACM,WAAW,CAAC,CAChCI,oBAAoB,CAACV,IAAI,CAACtB,YAAY,CAAC,CACvC6B,aAAa,CAAC,6BAA6B,CAAC,CAChD,CAAC,IAAM,IAAII,GAAG,CAACE,EAAE,CAAE,CACfN,aAAa,CAAC,sCAAsC,CAAC,CACzD,CAAC,IAAM,CACHA,aAAa,CAAC,kBAAkB,CAAC,CACrC,CACJ,CAAE,MAAOL,GAAG,CAAE,CACVK,aAAa,CAACL,GAAG,CAACC,OAAO,CAAC,CAC9B,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}