{"ast":null,"code":"import { login, register, refreshToken, testApi } from \"../authApi.ts\";\nimport { signInDialogTexts as t } from \"./signInDialog.texts.ts\";\nexport async function handleSubmitHelper(_ref) {\n  let {\n    e,\n    mode,\n    email,\n    password,\n    setError,\n    setLoading,\n    onAuthSuccess,\n    setRegisterSuccess,\n    setEmail,\n    setPassword,\n    setMode\n  } = _ref;\n  e.preventDefault();\n  setError(\"\");\n  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n    setError(t.validEmail);\n    return;\n  }\n  if (password.length < 8) {\n    setError(t.validPassword);\n    return;\n  }\n  setLoading(true);\n  try {\n    let data;\n    if (mode === \"signIn\") {\n      data = await login(email, password);\n      onAuthSuccess(data);\n    } else {\n      data = await register(email, password);\n      setRegisterSuccess(true);\n      setEmail(\"\");\n      setPassword(\"\");\n      setTimeout(() => {\n        setRegisterSuccess(false);\n        setMode(\"signIn\");\n      }, 1500);\n    }\n  } catch (err) {\n    setError(err.message);\n  } finally {\n    setLoading(false);\n  }\n}\nexport async function handleTestHelper(_ref2) {\n  let {\n    accessToken,\n    setTestResult,\n    refreshTokenValue,\n    setAccessToken,\n    setRefreshTokenValue\n  } = _ref2;\n  setTestResult(\"\");\n  try {\n    const res = await testApi(accessToken);\n    if (res.status === 401) {\n      const data = await refreshToken(refreshTokenValue);\n      setAccessToken(data.accessToken);\n      setRefreshTokenValue(data.refreshToken);\n      setTestResult(\"Token refreshed. Try again.\");\n    } else if (res.ok) {\n      setTestResult(\"API call successful! Token is valid.\");\n    } else {\n      setTestResult(\"API call failed.\");\n    }\n  } catch (err) {\n    setTestResult(err.message);\n  }\n}","map":{"version":3,"names":["login","register","refreshToken","testApi","signInDialogTexts","t","handleSubmitHelper","_ref","e","mode","email","password","setError","setLoading","onAuthSuccess","setRegisterSuccess","setEmail","setPassword","setMode","preventDefault","test","validEmail","length","validPassword","data","setTimeout","err","message","handleTestHelper","_ref2","accessToken","setTestResult","refreshTokenValue","setAccessToken","setRefreshTokenValue","res","status","ok"],"sources":["/Users/cristinadobre/Legacy/tickadoo-task/src/SignInDialog/signInDialog.handlers.ts"],"sourcesContent":["import { login, register, refreshToken, testApi } from \"../authApi.ts\";\nimport { signInDialogTexts as t } from \"./signInDialog.texts.ts\";\n\nexport async function handleSubmitHelper({\n    e,\n    mode,\n    email,\n    password,\n    setError,\n    setLoading,\n    onAuthSuccess,\n    setRegisterSuccess,\n    setEmail,\n    setPassword,\n    setMode,\n}) {\n    e.preventDefault();\n    setError(\"\");\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n        setError(t.validEmail);\n        return;\n    }\n    if (password.length < 8) {\n        setError(t.validPassword);\n        return;\n    }\n    setLoading(true);\n    try {\n        let data: { accessToken: string; refreshToken: string; };\n        if (mode === \"signIn\") {\n            data = await login(email, password);\n            onAuthSuccess(data);\n        } else {\n            data = await register(email, password);\n            setRegisterSuccess(true);\n            setEmail(\"\");\n            setPassword(\"\");\n            setTimeout(() => {\n                setRegisterSuccess(false);\n                setMode(\"signIn\");\n            }, 1500);\n        }\n    } catch (err) {\n        setError(err.message);\n    } finally {\n        setLoading(false);\n    }\n}\n\nexport async function handleTestHelper({\n    accessToken,\n    setTestResult,\n    refreshTokenValue,\n    setAccessToken,\n    setRefreshTokenValue,\n}) {\n    setTestResult(\"\");\n    try {\n        const res = await testApi(accessToken);\n        if (res.status === 401) {\n            const data = await refreshToken(refreshTokenValue);\n            setAccessToken(data.accessToken);\n            setRefreshTokenValue(data.refreshToken);\n            setTestResult(\"Token refreshed. Try again.\");\n        } else if (res.ok) {\n            setTestResult(\"API call successful! Token is valid.\");\n        } else {\n            setTestResult(\"API call failed.\");\n        }\n    } catch (err) {\n        setTestResult(err.message);\n    }\n}"],"mappings":"AAAA,SAASA,KAAK,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AACtE,SAASC,iBAAiB,IAAIC,CAAC,QAAQ,yBAAyB;AAEhE,OAAO,eAAeC,kBAAkBA,CAAAC,IAAA,EAYrC;EAAA,IAZsC;IACrCC,CAAC;IACDC,IAAI;IACJC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,UAAU;IACVC,aAAa;IACbC,kBAAkB;IAClBC,QAAQ;IACRC,WAAW;IACXC;EACJ,CAAC,GAAAX,IAAA;EACGC,CAAC,CAACW,cAAc,CAAC,CAAC;EAClBP,QAAQ,CAAC,EAAE,CAAC;EACZ,IAAI,CAAC,4BAA4B,CAACQ,IAAI,CAACV,KAAK,CAAC,EAAE;IAC3CE,QAAQ,CAACP,CAAC,CAACgB,UAAU,CAAC;IACtB;EACJ;EACA,IAAIV,QAAQ,CAACW,MAAM,GAAG,CAAC,EAAE;IACrBV,QAAQ,CAACP,CAAC,CAACkB,aAAa,CAAC;IACzB;EACJ;EACAV,UAAU,CAAC,IAAI,CAAC;EAChB,IAAI;IACA,IAAIW,IAAoD;IACxD,IAAIf,IAAI,KAAK,QAAQ,EAAE;MACnBe,IAAI,GAAG,MAAMxB,KAAK,CAACU,KAAK,EAAEC,QAAQ,CAAC;MACnCG,aAAa,CAACU,IAAI,CAAC;IACvB,CAAC,MAAM;MACHA,IAAI,GAAG,MAAMvB,QAAQ,CAACS,KAAK,EAAEC,QAAQ,CAAC;MACtCI,kBAAkB,CAAC,IAAI,CAAC;MACxBC,QAAQ,CAAC,EAAE,CAAC;MACZC,WAAW,CAAC,EAAE,CAAC;MACfQ,UAAU,CAAC,MAAM;QACbV,kBAAkB,CAAC,KAAK,CAAC;QACzBG,OAAO,CAAC,QAAQ,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACVd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;EACzB,CAAC,SAAS;IACNd,UAAU,CAAC,KAAK,CAAC;EACrB;AACJ;AAEA,OAAO,eAAee,gBAAgBA,CAAAC,KAAA,EAMnC;EAAA,IANoC;IACnCC,WAAW;IACXC,aAAa;IACbC,iBAAiB;IACjBC,cAAc;IACdC;EACJ,CAAC,GAAAL,KAAA;EACGE,aAAa,CAAC,EAAE,CAAC;EACjB,IAAI;IACA,MAAMI,GAAG,GAAG,MAAMhC,OAAO,CAAC2B,WAAW,CAAC;IACtC,IAAIK,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;MACpB,MAAMZ,IAAI,GAAG,MAAMtB,YAAY,CAAC8B,iBAAiB,CAAC;MAClDC,cAAc,CAACT,IAAI,CAACM,WAAW,CAAC;MAChCI,oBAAoB,CAACV,IAAI,CAACtB,YAAY,CAAC;MACvC6B,aAAa,CAAC,6BAA6B,CAAC;IAChD,CAAC,MAAM,IAAII,GAAG,CAACE,EAAE,EAAE;MACfN,aAAa,CAAC,sCAAsC,CAAC;IACzD,CAAC,MAAM;MACHA,aAAa,CAAC,kBAAkB,CAAC;IACrC;EACJ,CAAC,CAAC,OAAOL,GAAG,EAAE;IACVK,aAAa,CAACL,GAAG,CAACC,OAAO,CAAC;EAC9B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}